<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Fish中Man失效的解决</title>
    <link href="/2022/10/03/Fish%E4%B8%ADMan%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/10/03/Fish%E4%B8%ADMan%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="Fish-中Man失效的解决"><a href="#Fish-中Man失效的解决" class="headerlink" title="Fish 中Man失效的解决"></a>Fish 中Man失效的解决</h2><p>一直用的fish, 今天突然man 用不了了，例如输入</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">man <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>终端提示我</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-literal">No</span><span class="hljs-built_in"> manual </span>entry <span class="hljs-keyword">for</span> ls<br></code></pre></td></tr></table></figure><p>于是我查看当前man的环境变量设置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$MANPATH</span><br></code></pre></td></tr></table></figure><p>得到:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/home/</span>liuxing<span class="hljs-regexp">/.opam/</span>cs3110-<span class="hljs-number">2022</span>fa/man<br></code></pre></td></tr></table></figure><p>所以不知道为什么， Ocaml的环境配置突然把MANPATH给覆盖了</p><p>在网上搜索一些解决办法，基本上都没用，因为是针对bash的，我最开始还以为bash和fish的差别不大，后来发现还是有一些差别。</p><p>例如网上一些解答：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ yum install -y man-pages<br>$ yum install -y man-db<br></code></pre></td></tr></table></figure><p>yum命令都无法识别，可能是CentOS? 我是WSL2(Ubuntu 20.04)</p><p>或者</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mandb -c</span><br></code></pre></td></tr></table></figure><p>更新一下database，无效，这不是db的问题</p><p>或者设置alias:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> man <span class="hljs-string">&quot;MANPATH=/usr/share/man man&quot;</span><br></code></pre></td></tr></table></figure><p>这个会报错递归什么的，我也不清楚，因为你单次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">MANPATH=/usr/share/man man <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>是可以的，然后alias的var在重启shell之后也会失效</p><p>然后介绍一些基础知识</p><h3 id="什么是环境变量？"><a href="#什么是环境变量？" class="headerlink" title="什么是环境变量？"></a>什么是环境变量？</h3><p>环境变量是操作系统提供给应用程序访问的简单 key &#x2F; value字符串；windows&#x2F;linux&#x2F;mac都有同样的概念。</p><p>一般用于提供参数值给不同的应用程序。</p><p>介绍了一些Linux下的环境变量分类：全局环境变量、用户环境变量、临时环境变量</p><ul><li>全局环境变量放在<code>/etc/profile</code>中，这些环境变量对系统中的所有用户都有效;</li><li>用户环境变量放在用户的home目录下也就是<code>~/.bashrc</code></li><li>临时环境变量是在shell上赋值输出的环境变量，只在当前shell有效。</li></ul><p>所有的环境变量可以通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> $变量名<br></code></pre></td></tr></table></figure><p>查看</p><p>那么当我查看&#x2F;etc&#x2F;profile 或者 ~&#x2F;.bashrc里面的内容之后，都没有找到关于MANPATH的信息，</p><p>关于使用vim查找的技巧：</p><ul><li><p>在normal mode(就是最开始不做任何切换的模式)，按下 &#x2F; 即可进入查找模式，输入要查找的字符串并按下回车，例如</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">/MANPATH</span><br></code></pre></td></tr></table></figure><p>然后按下 Enter(回车), Vim会跳转到第一个匹配</p></li><li><p>按下 n 查找下一个，按下 N 查找上一个</p></li></ul><p>但是输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">env</span><br></code></pre></td></tr></table></figure><p>还是能打印出所有环境变量，部分如下所示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">HOME=<span class="hljs-regexp">/home/</span>liuxing<br>HOSTTYPE=x86_64<br>LANG=C.UTF-<span class="hljs-number">8</span><br>LOGNAME=liuxing<br>MANPATH=<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/man:/</span>home<span class="hljs-regexp">/liuxing/</span>.opam<span class="hljs-regexp">/cs3110-2022fa/m</span>an<br></code></pre></td></tr></table></figure><p>可以看到这里我的MANPATH存在于环境变量之中</p><p>所以我就十分疑惑，在profile或者.bashrc里面都没有看到MANPATH，这些环境变量到底放在哪？</p><p>那么事实上最后我还是没能解决这个疑惑，但是搞清楚了一些fish不一样的地方，例如</p><p>对于Linux, 设置临时环境变量是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> VAL=<span class="hljs-string">&quot;...&quot;</span><br></code></pre></td></tr></table></figure><p>于是网上告诉你去设置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">MANPATH</span>=<span class="hljs-string">&#x27;/usr/share/man&#x27;</span><br></code></pre></td></tr></table></figure><p>但是这是临时的，关闭shell重启就会失效, (事实上这条命令对fish没用，返回错误<strong>1</strong>)</p><p>想要实现永久有效，可以根据你希望将它设置成全局环境变量还是用户环境变量，来写到&#x2F;etc&#x2F;profile 或 ~&#x2F;.bashrc里面</p><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p>但是可能是一些语法不兼容，当我将 <code>MANPATH=&quot;/usr/share/man&quot;</code>写到~&#x2F;.bashrc并source时，会报错（即使什么都不写，只是执行source ~&#x2F;.bashrc 也会报下面这个错误）</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">~/.bashrc (line <span class="hljs-number">7</span>): <span class="hljs-string">&#x27;case&#x27;</span> builtin not inside of <span class="hljs-keyword">switch</span> block<br><span class="hljs-keyword">case</span> $- in<br>^<br><span class="hljs-keyword">from</span> sourcing <span class="hljs-keyword">file</span> ~/.bashrc<br><span class="hljs-keyword">source</span>: Error <span class="hljs-keyword">while</span> reading <span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;/home/liuxing/.bashrc&#x27;</span><br></code></pre></td></tr></table></figure><p>提升我case语句没有写在switch块内，我个人不太懂script的语法，也就没明白。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>fish 没有 export, 而是通过 set -x 命令设置环境变量，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> -x EDITOR vim<br></code></pre></td></tr></table></figure><p>fish不支持 <code>key=value</code>这种形式，只能使用set</p><p>其次，这条命令只对当前的shell有效，重启后失效，</p><p>而</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> -Ux EDTOR vim<br></code></pre></td></tr></table></figure><p>这条命令是设置一个通用变量，在fish中，变量引用顺序是local –&gt; global –&gt; universal </p><p>如果失效了，原因往往是已经存在同名的全局变量</p><p><a href="https://fishshell.com/docs/current/faq.html">官网</a>的解释如下：</p><p>A global variable of the same name already exists.</p><p>Environment variables such as <code>EDITOR</code> or <code>TZ</code> can be set universally using <code>set -Ux</code>. However, if there is an environment variable already set before fish starts (such as by login scripts or system administrators), it is imported into fish as a global variable. The <a href="https://fishshell.com/docs/current/language.html#variables-scope">variable scopes</a> are searched from the “inside out”, which means that local variables are checked first, followed by global variables, and finally universal variables.</p><p>This means that the global value takes precedence over the universal value.</p><p>To avoid this problem, consider changing the setting which fish inherits. If this is not possible, add a statement to your <a href="https://fishshell.com/docs/current/language.html#configuration">configuration file</a> (usually <code>~/.config/fish/config.fish</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> -gx EDITOR vim<br></code></pre></td></tr></table></figure><p>那么fish中与.bash 或 .profile等价的文件叫做<code>~/.config/fish/config.fish</code></p><p>因此我们在这个文件里面加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> -gx MANPATH <span class="hljs-string">&quot;/usr/share/man&quot;</span><br></code></pre></td></tr></table></figure><p>然后保存重启，就可以了，现在打印$MANPATH:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$MANPATH</span><br>&gt; /usr/share/man /home/liuxing/.opam/cs3110-2022fa/man<br></code></pre></td></tr></table></figure><p>虽然还是有OCaml的man，但是我们加入的已经追加到前面了，然后就可以使用man了, 并且重启shell也没有失效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">man <span class="hljs-built_in">ls</span><br><br>LS(1)                                               User Commands                                               LS(1)<br><br>NAME<br>       <span class="hljs-built_in">ls</span> - list directory contents<br><br>SYNOPSIS<br>       <span class="hljs-built_in">ls</span> [OPTION]... [FILE]...<br></code></pre></td></tr></table></figure><p>[<a href="https://stackoverflow.com/questions/45119425/how-can-i-set-environment-variables-in-fish">参考1</a>]</p><p>[<a href="https://zhuanlan.zhihu.com/p/44003359">参考2</a>]</p><p>[<a href="https://zhuanlan.zhihu.com/p/26157081">参考3</a>]</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Jekyll+GithubPages写Notes</title>
    <link href="/2022/06/26/%E4%BD%BF%E7%94%A8Jekyll-GithubPages%E5%86%99Notes/"/>
    <url>/2022/06/26/%E4%BD%BF%E7%94%A8Jekyll-GithubPages%E5%86%99Notes/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Jekyll是一个静态网站生成器，能将文本标记语言(例如markdown)生成html文件，从而能在站点上进行部署。</p><h2 id="Jekyll安装"><a href="#Jekyll安装" class="headerlink" title="Jekyll安装"></a>Jekyll安装</h2><p>先决条件：</p><ul><li>Ruby  version 2.5.0 或更高</li><li>RubyGems</li><li>GCC and Make</li></ul><p>这些在网上简单搜索即可，使用查看版本号的命令可以看看是否安装完毕<br><a href="https://jekyllrb.com/docs/">参考教程</a></p><h2 id="Just-the-docs-主题安装"><a href="#Just-the-docs-主题安装" class="headerlink" title="Just-the-docs 主题安装"></a>Just-the-docs 主题安装</h2><p>无意间看到CS162的HW的文档风格是这样的：<br><img src="/img/2022-06-26-16-57-43.png"><br>顿时感觉这个主题简洁美观，于是决定使用这个主题</p><p><a href="https://just-the-docs.github.io/just-the-docs/">安装教程</a></p><h2 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h2><p>运行</p><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">bundle</span> <span class="hljs-string">exec</span> <span class="hljs-string">jekyll</span> <span class="hljs-string">serve</span><br></code></pre></td></tr></table></figure><p>可以在本地打开localhost:4000 这个端口，查看网站情况</p><h2 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h2><p>起初我以为每个账户只能拥有一个Github Pages，其实不然，针对username的域名的确只能有一个，但是project没有限制。</p><p>步骤：</p><ol><li>去Github 新建一个仓库，名字随意，与是否github.io结尾无关</li><li>将本地文件目录下的全部文件上传至远程仓库，这里我不清楚只传一个总的文件是否可以，我是把文件本身作为一个本地仓库，然后上传的话就把目录下的所有文件上传：<br><img src="/img/2022-06-26-17-06-29.png"></li><li>将本地Jekyll的_config.yml文件进行修改：<br><img src="/img/2022-06-26-17-08-57.png"><br>  还需要修改：  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">domain:</span> <span class="hljs-string">my-site.github.io</span>       <span class="hljs-comment"># if you want to force HTTPS, specify the domain without the http at the start, e.g. example.com</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://my-site.github.io</span>  <span class="hljs-comment"># the base hostname and protocol for your site, e.g. http://example.com</span><br><span class="hljs-attr">baseurl:</span> <span class="hljs-string">/REPOSITORY-NAME/</span>      <span class="hljs-comment"># place folder name if the site is served in a subfolder</span><br></code></pre></td></tr></table></figure>我最开始没有注释掉原来的theme，导致Action一直部署失败：<br><img src="/img/2022-06-26-17-09-59.png"></li></ol><p>其实最重要的是，在just-the-docs的文档第一句就已经说明白了：<br><img src="/img/2022-06-26-17-24-04.png"></p><p>可以对Action进行查看，里面有报错提醒，<a href="https://docs.github.com/cn/actions/monitoring-and-troubleshooting-workflows/viewing-workflow-run-history">更多参考</a></p><p>最后生成域名：<br><img src="/img/2022-06-26-17-29-24.png"></p><p><strong>补充：</strong> 如果想要生成数学公式，可参考<a href="https://pdmosses.github.io/just-the-docs-tests/docs/math/mathjax2/tests.html#mjx-eqn-eq%3Atest">just-the-docs test</a></p><p>大功告成！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>配置VS code 扩展插件的Configuration</title>
    <link href="/2022/06/01/%E9%85%8D%E7%BD%AEVScode%E6%89%A9%E5%B1%95%E6%8F%92%E4%BB%B6%E7%9A%84Configuration/"/>
    <url>/2022/06/01/%E9%85%8D%E7%BD%AEVScode%E6%89%A9%E5%B1%95%E6%8F%92%E4%BB%B6%E7%9A%84Configuration/</url>
    
    <content type="html"><![CDATA[<p>一直以来我都没折腾VS code，原因是大一的时候搞过，当时连gcc什么的都不明白，跟着一个b站视频下载一系列插件：code runner等等，配置了一上午终于能运行了，后来我又一段时间没用VS code，python用的IDLE,java用的IntelliJ，c用的Dev，但是今天突然想试一下vscode，结果发现长时间没用，突然就不行了，于是又折腾了一番，总结一下经验。</p><h3 id="问题引出"><a href="#问题引出" class="headerlink" title="问题引出"></a>问题引出</h3><p>当我写好一段python 代码，点击右上角▶运行时：</p><p>出现以下报错：</p><figure class="highlight vim"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs vim">Command <span class="hljs-string">&#x27;python&#x27;</span> not found,did you mean:<br><span class="hljs-keyword">command</span> <span class="hljs-string">&#x27;python3&#x27;</span> from <span class="hljs-keyword">deb</span> <span class="hljs-keyword">python3</span><br><span class="hljs-keyword">command</span> <span class="hljs-string">&#x27;python&#x27;</span> from <span class="hljs-keyword">deb</span> <span class="hljs-keyword">python</span>-<span class="hljs-keyword">is</span>-<span class="hljs-keyword">python3</span><br></code></pre></td></tr></table></figure><p>这个报错很容易看出来，在windows的shell上，例如cmd，一般运行 python 命令，</p><p>而在Linux下的shell上，需要run python3</p><p>那么当你点击播放键，这个code runner插件就相当于帮你执行这个命令</p><p>所以现在的问题就是怎么更改code runner 默认的python 命令 –&gt; python3</p><p>也就是如何配置extension 的 json</p><h3 id="探索解法"><a href="#探索解法" class="headerlink" title="探索解法"></a>探索解法</h3><p>在VS code 中，Ctrl + shift + p 打开命令面板，输入 settings, 选择 <code>\&gt;Preferences: Open Settings (JSON)</code>‘即可自行配置扩展插件的参数，这个参数会覆盖 <code>&gt;Preference: Open Default Settings (JSON)</code>的结果</p><h4 id="Default-Settings-JSON"><a href="#Default-Settings-JSON" class="headerlink" title="Default Settings(JSON)"></a>Default Settings(JSON)</h4><p>我们可以先看看default settings 的内容：</p><p>所有的扩展等等默认配置文件都在这下面，需要注意的是这个json文件是一个 <strong>Read Only</strong>只读文件，因此我们做不到对其更改，我们只能在settings.json里面添加，它会覆盖Defalut的结果，这是settings.json文件:</p><p>需要仿照已有的格式，进行配置</p><p>点开Code Runner 的usage说明，可以发现：</p><p>它对python的默认配置是 <code>python</code> ，而不是<code>python3</code> </p><p>因此仿照格式，在settings.json文件里面插入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;code-runner.executorMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;python&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;python3&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>即可，重新运行后却发现一个新的问题：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">No</span> such <span class="hljs-keyword">file</span> <span class="hljs-keyword">or</span> directory<br></code></pre></td></tr></table></figure><p>提示我们没有这个file &#x2F; directory</p><p>我看了又看发现路径没问题啊，又纠结了好久，最后发现了我的主机设备名的路径是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/mnt/</span>c<span class="hljs-regexp">/User/</span>Lenovo<span class="hljs-regexp">/Desktop/</span>....<br></code></pre></td></tr></table></figure><p>也不知道是什么原因，现在的terminal是在WSL下的，因此直接的<code>C:\User\LENOVO\Desktop..</code>这种路径就不行了</p><h3 id="Read-the-friendly-Manual"><a href="#Read-the-friendly-Manual" class="headerlink" title="Read the friendly Manual"></a>Read the friendly Manual</h3><p>仔细阅读code runner 的manual后发现</p><p>也就是说，code runner 的terminalRoot，默认是<code>C:\path</code> ,因此它执行脚本命令的时候才会是</p><p><code>C:\User\LENOVO\Desktop..</code> 这种路径，但是在WSL里面访问这种路径是无效的</p><p>那么在settings.json里面添加 <code>code-runner.terminalRoot:&quot;/mnt/&quot;</code></p><p>之后就解决啦：</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul><li>VS code里面所有的extension的默认配置都在default settings.json文件里，这是一个只读文件</li><li>如何修改extension的配置，ctrl + shift + p打开命令面板搜索settings–&gt;选择<code>&gt;Preferences: Open Settings (JSON)</code>，进行自定义配置。</li><li>格式要严格参照JSON，且参照扩展的Usage 说明，牢记RTFM</li></ul>]]></content>
    
    
    <categories>
      
      <category>VS code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61c Spring2022 Project2</title>
    <link href="/2022/03/21/CS61c-Spring2022-Project2/"/>
    <url>/2022/03/21/CS61c-Spring2022-Project2/</url>
    
    <content type="html"><![CDATA[<h1 id="CS61C-Spring2022-Project2-Guide"><a href="#CS61C-Spring2022-Project2-Guide" class="headerlink" title="CS61C Spring2022 Project2 Guide"></a>CS61C Spring2022 Project2 Guide</h1><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p>最容易错的一点是:</p><p>在 C 语言中，如果 *p 是 int 类型的指针，指向一个 int Array</p><p>执行</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs c">p = p + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>的操作，实际上会让地址从 0x00  变成  0x04，相当于从 A[0] 跳到 A[1] , 也就是C 自动帮你处理了对于type 的偏移量</p><p>但是在 RISC-V 中，当 p 指向 0x00 时，执行 p + 1 只会得到 0x01, 并不是int 数组的下一位元素，需要手动乘以4以访问下一位元素</p><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>venus 使用：</p><p>设置ebreak 断点之后，点击 run 才能到达断点处，可以在调试过程中重复点击 run </p><p>点击 step 会跳转到下一步，如果call function 则会单步进入到 function，而不能跳过 function</p><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><p>在task 6的时候，写的测试需要把</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">raise</span> NotImplementedError(<span class="hljs-string">&quot;TODO&quot;</span>)<br></code></pre></td></tr></table></figure><p>注释掉才能跑，然后最后一个测试malloc返回失败，a0 &#x3D; 26，</p><p>测试malloc返回失败的例子:</p><p>传入数组长度为 0x7FFFFFFF (32bit 有符号数最大值)</p><h3 id="4-task7"><a href="#4-task7" class="headerlink" title="4.task7"></a>4.task7</h3><p>以下几个坑点:</p><p>1.fopen 返回的file discriptor 放在a0中，需要将其存入栈中，因为接下来的fread, fclose都需要 file discriptor作为参数传入，每次使用时需将file discriptor从栈中取出传入a0 ，每次a0都会被覆盖，所以需要备份</p><p>2.fread 的使用</p><p>需要注意的是 连续调用fread ，是相当于接着上次读文件的地方继续读的，例如第一次调用</p><p>fread ，读了4byte 读出 row ，那么接着再使用 fread ，同样传入 4 byte 即可</p><p>如果传入的参数非file discriptor ， 返回值是0xFFFFFFFF，例如先把文件close之后再使用fread就会出现这种情况</p><p>3.查看一个二进制文件.bin  使用命令:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">xxd</span> -e filename.bin<br></code></pre></td></tr></table></figure><p>替换掉filename.bin即可</p><h3 id="5-task8"><a href="#5-task8" class="headerlink" title="5.task8"></a>5.task8</h3><p>需要注意给write_matrix的参数a1是一个数据的地址，例如数组:</p><p>[1, 2, 3, 4, 5, 6, 7, 8, 9]</p><p>的地址，题目要求先写入行和列，因此需要另外malloc一个buffer 存入 row 和 column，将row 和 column写入文件后，再将数组中的所有元素写入</p><h3 id="6-评测截图"><a href="#6-评测截图" class="headerlink" title="6. 评测截图"></a>6. 评测截图</h3><p>fail的那一项是calling convention检查，不知道哪里有问题</p><p><img src="/test1.jpg"></p><p><img src="/test2.jpg"></p><p>最后想说的是，这个项目是汇编写的数字识别，可惜最后应用的时候缺少提示给的文件夹,但是dump.py群里宇航员发过</p>]]></content>
    
    
    <categories>
      
      <category>CS61C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61c Spring2022 Project1</title>
    <link href="/2022/03/05/CS61c-Spring2022-Project1/"/>
    <url>/2022/03/05/CS61c-Spring2022-Project1/</url>
    
    <content type="html"><![CDATA[<h1 id="CS61C-Spring2022-Project1-Guide"><a href="#CS61C-Spring2022-Project1-Guide" class="headerlink" title="CS61C Spring2022 Project1 Guide"></a>CS61C Spring2022 Project1 Guide</h1><h4 id="1-task1"><a href="#1-task1" class="headerlink" title="1. task1"></a>1. task1</h4><p>task1给的row 和 column 是从0开始的，不需要再-1</p><h4 id="2-二维数组两种表示"><a href="#2-二维数组两种表示" class="headerlink" title="2. 二维数组两种表示"></a>2. 二维数组两种表示</h4><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> **board<br></code></pre></td></tr></table></figure><p>首先在C 里面，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> * ptr<br></code></pre></td></tr></table></figure><p>可以表示：</p><ul><li>字符串</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">ptr = <span class="hljs-string">&quot;abc&quot;</span><br></code></pre></td></tr></table></figure><ul><li>字符数组</li></ul><p>那么，**char board 可以看出一个字符指针型数组，数组中的每个元素都是 *char， 每个 *char又可以指向一个一维字符数组， 因此</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">**<span class="hljs-type">char</span><br></code></pre></td></tr></table></figure><p>  相当于二维字符数组</p><p>其二是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *arr[]<br></code></pre></td></tr></table></figure><p>是一个*char 型数组，arr数组里面的元素都是 *char类型</p><hr><h4 id="3-注意如何为二维pointer-to-pointer-to-char数组board分配malloc的空间"><a href="#3-注意如何为二维pointer-to-pointer-to-char数组board分配malloc的空间" class="headerlink" title="3. 注意如何为二维pointer to  pointer to char数组board分配malloc的空间"></a>3. 注意如何为二维pointer to  pointer to char数组board分配malloc的空间</h4><p><img src="/allocate-space.png" alt="allocate-space"></p><p>对于二维数组，不能直接执行:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">board = (<span class="hljs-type">char</span>**)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>)*<span class="hljs-type">size_t</span>)<br></code></pre></td></tr></table></figure><p>而是要一步一步的，先把它当成一维指针型数组，为其分配一维数组的空间:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">board = (<span class="hljs-type">char</span>**)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>*)*size_t1)<br></code></pre></td></tr></table></figure><p>然后再为该指针数组里面的每个元素分配空间，每个元素都指向一个新的char 数组:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size_t1; i++) &#123;<br>    board[i] = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>)*size_t2);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-task2"><a href="#4-task2" class="headerlink" title="4. task2"></a>4. task2</h4><p>task2 注意二维数组，每个元素都是一维数组，要分别free每个元素,否则 会造成内存泄漏：</p><p><img src="/memory-leak.png"></p><p><img src="/memory-unleak.png"></p><h4 id="5-segmentation-fault的原因"><a href="#5-segmentation-fault的原因" class="headerlink" title="5. segmentation fault的原因"></a>5. segmentation fault的原因</h4><ul><li>数组越界</li><li>访问不存在的内存空间(未分配)</li></ul><h4 id="6-踩坑点"><a href="#6-踩坑点" class="headerlink" title="6.踩坑点"></a>6.踩坑点</h4><p>这里比较坑的一点是</p><ol><li><p>row  是相当于y坐标，column相当于横坐标，对于board[ ][ ]二维数组,访问写成board[y][x] 而不是board [x][y]</p></li><li><p>如果蛇死了，立即将头替换为’x’即可</p></li></ol><h4 id="7-task-5"><a href="#7-task-5" class="headerlink" title="7. task 5"></a>7. task 5</h4><p>文件输入流，太难了，文件没学好，实际上就是让你从文件中将 长方形board二维数组 读入</p><p>game-&gt;board，并设置好x_size和y_size，然后返回*game</p><p>这一步我使用的是 fgets() ,由于你不知道文件里面的长方形矩阵有多少个字符，也不知道board数组有多少行，无法用malloc精确开辟空间，但是这里fgets又需要你传入特定大小作为参数，况且如果不事先开辟board的空间如何使用board $[i][j] $ ? 因此此处使用一个固定大小的缓存buffer数组，和向fgets()传入一个固定大小参数</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">char</span> *fgets(<span class="hljs-built_in">char</span> *<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span> n, FILE *stream)<br></code></pre></td></tr></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li><strong>str</strong> – 这是指向一个字符数组的指针，该数组存储了要读取的字符串。</li><li><strong>n</strong> – 这是要读取的最大字符数（包括最后的空字符）。通常是使用以 str 传递的数组长度。</li><li><strong>stream</strong> – 这是指向 FILE 对象的指针，该 FILE 对象标识了要从中读取字符的流。</li></ul><p>同时可打印buffer数组核对是否读入成功</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,buffer);<br></code></pre></td></tr></table></figure><h4 id="8-task-7-关于函数指针-pointer-to-function-的传参"><a href="#8-task-7-关于函数指针-pointer-to-function-的传参" class="headerlink" title="8. task 7 关于函数指针 pointer to function 的传参"></a>8. task 7 关于函数指针 pointer to function 的传参</h4><p>参见 <a href="https://www.geeksforgeeks.org/function-pointer-in-c/">https://www.geeksforgeeks.org/function-pointer-in-c/</a></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">update_state(<span class="hljs-keyword">state</span>, &amp;deterministic_food);<br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">void update_state(game_state_t *<span class="hljs-keyword">state</span>, int (*add_food)(game_state_t *<span class="hljs-keyword">state</span>))<br></code></pre></td></tr></table></figure><hr><p>成功完成所有本地测试:</p><p><img src="/image-61c-proj1.png"></p>]]></content>
    
    
    <categories>
      
      <category>CS61C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2022/02/27/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2022/02/27/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/1970/01/01/hello-world/"/>
    <url>/1970/01/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
